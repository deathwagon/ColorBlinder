@using ColorBlinder.Models;

@model AnalyzeViewModel

@{
  ViewBag.Title = "title";
}

<style type="text/css">
  body { padding: 0; margin: 0; }
  .table {
    display: table;
    margin-top: 20px
  }

  .left {
    width: 50%;
    display: table-cell;
    float: left;
  }
  #summary-list {
    margin: 0;
    padding: 0;
    list-style: none;
  }
  #summary-list li {
    margin: 0; padding: 5px 10px;
    border-top: 1px solid #fff;
  }
  #summary-toggle {
    cursor:pointer;
    margin: 0; padding: 5px 10px;
    background: #ccc;
  }
  label,input {
    cursor:pointer;
    font-weight:normal;
  }
</style>

<div id="summary-toggle" onclick="toggleSummary()">Toggle Summary</div>
<div id="summary">
  <ul id="summary-list"></ul>
</div>

<div class="table">
  <div>
    <img class="left" style="padding-top: 40px" id="original" src="@Model.OriginalImagePath" alt="Original Image" />
  </div>
  
  <div style="text-align: center">
    <label for="toggle-edges">Show Edges</label>
    <input type="checkbox" id="toggle-edges" onclick="update()" />
    <select id="filtertype" onchange='update();'>
      <option selected value="Achromatomaly">Achromatomaly</option>
      <option value="Protanopia">Protanopia</option>
      <option value="Protanomaly">Protanomaly</option>
      <option value="Deuteranopia">Deuteranopia</option>
      <option value="Deuteranomaly">Deuteranomaly</option>
      <option value="Tritanopia">Tritanopia</option>
      <option value="Tritanomaly">Tritanomaly</option>
      <option value="Achromatopsia">Achromatopsia</option>
    </select>
    (<span id="score-display"></span>)
        
    <img class="left" style="padding-top:20px" id="filter-image" src="@Model.FilterImagePath" alt="Filtered Image"/>
  </div>
</div>

<script type="text/javascript">
  var _entries = @Model.JsonData;
  var _showEdges = false;

  function update() {
    var ddl = document.getElementById("filtertype");
    var selectedValue = ddl.options[ddl.selectedIndex].value;

    var entry = _entries[selectedValue];
    var original  = _entries['Normal'];
    if (entry && entry.Url) {
      if (document.getElementById('toggle-edges').checked) {
        document.getElementById("filter-image").src = entry.EdgeUrl;
        document.getElementById("original").src = original.EdgeUrl;
      } else {
        document.getElementById("filter-image").src = entry.Url;
        document.getElementById("original").src = original.Url;
      }
      document.getElementById("score-display").innerHTML = entry.Score;
    }
  }

  function buildSummary() {
    var summaryUl = document.getElementById('summary-list');
    for (var filter in _entries) {
      if (_entries.hasOwnProperty(filter) && filter !== 'Normal') {
        var entry = _entries[filter];
        var li = document.createElement('li');
        li.innerText = filter +': ' + entry.Score;
        if (entry.Score < 0.88) {
          li.style = "background-color: " + percentageToHsl(entry.Score, 0, 30);
        } else {
          
          li.style = "background-color: " + percentageToHsl(entry.Score, 90, 120);
        }
        summaryUl.appendChild(li);
      }
    }
  }

  var showSummary = true;
  var summaryDiv = document.getElementById('summary');
  function toggleSummary() {
    showSummary = !showSummary;
    if (showSummary) {
      summaryDiv.style.display = 'block';
    } else {
      summaryDiv.style.display = 'none';
    }
  }

  // http://stackoverflow.com/a/17527156/62590
  // convert a number to a color using hsl
  function percentageToHsl(percentage, hue0, hue1) {
    var hue = (percentage * (hue1 - hue0)) + hue0;
    return 'hsl(' + hue + ', 100%, 50%)';
  }

  toggleSummary();
  buildSummary();
  update();
</script>